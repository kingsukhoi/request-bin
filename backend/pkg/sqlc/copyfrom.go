// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForCreateHeaders implements pgx.CopyFromSource.
type iteratorForCreateHeaders struct {
	rows                 []CreateHeadersParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateHeaders) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateHeaders) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RequestID,
		r.rows[0].Name,
		r.rows[0].Value,
	}, nil
}

func (r iteratorForCreateHeaders) Err() error {
	return nil
}

func (q *Queries) CreateHeaders(ctx context.Context, arg []CreateHeadersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"request_headers"}, []string{"request_id", "name", "value"}, &iteratorForCreateHeaders{rows: arg})
}

// iteratorForCreateQueryParameters implements pgx.CopyFromSource.
type iteratorForCreateQueryParameters struct {
	rows                 []CreateQueryParametersParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateQueryParameters) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateQueryParameters) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RequestID,
		r.rows[0].Name,
		r.rows[0].Value,
	}, nil
}

func (r iteratorForCreateQueryParameters) Err() error {
	return nil
}

func (q *Queries) CreateQueryParameters(ctx context.Context, arg []CreateQueryParametersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"request_query_parameters"}, []string{"request_id", "name", "value"}, &iteratorForCreateQueryParameters{rows: arg})
}
