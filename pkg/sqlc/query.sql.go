// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type CreateHeadersParams struct {
	RequestID uuid.UUID   `json:"requestId"`
	Name      string      `json:"name"`
	Value     pgtype.Text `json:"value"`
}

type CreateQueryParametersParams struct {
	RequestID uuid.UUID   `json:"requestId"`
	Name      string      `json:"name"`
	Value     pgtype.Text `json:"value"`
}

const createRequest = `-- name: CreateRequest :exec
INSERT INTO requests (id, method, content, source_ip, response_code, timestamp, path)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateRequestParams struct {
	ID           uuid.UUID          `json:"id"`
	Method       pgtype.Text        `json:"method"`
	Content      []byte             `json:"content"`
	SourceIp     pgtype.Text        `json:"sourceIp"`
	ResponseCode pgtype.Int4        `json:"responseCode"`
	Timestamp    pgtype.Timestamptz `json:"timestamp"`
	Path         pgtype.Text        `json:"path"`
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) error {
	_, err := q.db.Exec(ctx, createRequest,
		arg.ID,
		arg.Method,
		arg.Content,
		arg.SourceIp,
		arg.ResponseCode,
		arg.Timestamp,
		arg.Path,
	)
	return err
}

const getHeaders = `-- name: GetHeaders :many
select request_id, name,value
from request_headers
`

func (q *Queries) GetHeaders(ctx context.Context) ([]RequestHeader, error) {
	rows, err := q.db.Query(ctx, getHeaders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RequestHeader{}
	for rows.Next() {
		var i RequestHeader
		if err := rows.Scan(&i.RequestID, &i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHeadersById = `-- name: GetHeadersById :many
select request_id, name,value
from request_headers
where request_id = $1
`

func (q *Queries) GetHeadersById(ctx context.Context, requestID uuid.UUID) ([]RequestHeader, error) {
	rows, err := q.db.Query(ctx, getHeadersById, requestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RequestHeader{}
	for rows.Next() {
		var i RequestHeader
		if err := rows.Scan(&i.RequestID, &i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQueryParams = `-- name: GetQueryParams :many
select request_id, name,value
from request_query_parameters
`

func (q *Queries) GetQueryParams(ctx context.Context) ([]RequestQueryParameter, error) {
	rows, err := q.db.Query(ctx, getQueryParams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RequestQueryParameter{}
	for rows.Next() {
		var i RequestQueryParameter
		if err := rows.Scan(&i.RequestID, &i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQueryParamsById = `-- name: GetQueryParamsById :many
select request_id, name,value
from request_query_parameters
where request_id = $1
`

func (q *Queries) GetQueryParamsById(ctx context.Context, requestID uuid.UUID) ([]RequestQueryParameter, error) {
	rows, err := q.db.Query(ctx, getQueryParamsById, requestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RequestQueryParameter{}
	for rows.Next() {
		var i RequestQueryParameter
		if err := rows.Scan(&i.RequestID, &i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRequests = `-- name: GetRequests :many
select id, method,content,source_ip,response_code,timestamp
from requests
`

type GetRequestsRow struct {
	ID           uuid.UUID          `json:"id"`
	Method       pgtype.Text        `json:"method"`
	Content      []byte             `json:"content"`
	SourceIp     pgtype.Text        `json:"sourceIp"`
	ResponseCode pgtype.Int4        `json:"responseCode"`
	Timestamp    pgtype.Timestamptz `json:"timestamp"`
}

func (q *Queries) GetRequests(ctx context.Context) ([]GetRequestsRow, error) {
	rows, err := q.db.Query(ctx, getRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRequestsRow{}
	for rows.Next() {
		var i GetRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.Method,
			&i.Content,
			&i.SourceIp,
			&i.ResponseCode,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
